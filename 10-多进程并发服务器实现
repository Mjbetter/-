# 多进程并发服务器实现



#### 一、多进程思路分析

1. ```
   1. Socket（）- 创建监听套接字
   2. Bind（）  - 绑定地址结构Struct sockaddr_in addr
   3. Listen（）
   4. while(1){
   	cfd = Accept() - 接受	客户端连接请求
   	pid = fork()
   	if(pid == 0) - 子进程read(cfd) --- 小->大 ---write(cfd)
   	{
   		close(lfd); - 关闭用于建立连接的套接字lfd
   		read(cfd);
   		小->大;
   		write();
   	}
   	else if(pid >0){ - 父进程
   		close(cfd); - 关闭用于与客户端通信的套接字cfd
   		continue;
   	}
   }
   5.子进程:
       close(lfd); - 关闭用于建立连接的套接字lfd
       read(cfd);
       小->大;
       write();
   6.父进程:
   	注册信号捕捉函数: SIGCHLD
   	在回调函数中，完成子进程回收
   	while(waitpid())
   ```

#### 二、多线程思路分析

1. ```
   1. Socket（）- 创建监听套接字
   2. Bind（）  - 绑定地址结构Struct sockaddr_in addr
   3. Listen（）
   4. while(1){
   	cfd = Accept();
   	pthread_create(&tid,NULL,tfn,NULL);
   	pthread_detach(tid);//pthread_join(tid,void **);新线程--专用于回收子线程
   }
   5.子线程:
   	void *tfn(void * arg){
   		read(cfd);
   		小->大;
   		write(cfd);
   		pthread_exit((void *)10)
   	}
   6.主线程:
   	
   ```


#### 三、多进程实现代码

1. 服务器代码

   - ```c
     #include "warp.h"
     
     #define SERVER_PORT 9527
     
     void catch_child(int signum){
     	while((waitpid(0,NULL,WNOHANG))>0);
     }
     
     int main(int argc,char *argv[])
     {
     	int lfd,cfd;
     	socklen_t client_addr_len;
     	pid_t pid;
     	int ret,i;
     	char buf[BUFSIZ];
     
     	struct sockaddr_in server_addr,client_addr;
     	memset(&server_addr,0,sizeof(server_addr));//将地址结构清零
     	
     	server_addr.sin_family = AF_INET;
     	server_addr.sin_port = htons(SERVER_PORT);
     	server_addr.sin_addr.s_addr = htonl(INADDR_ANY);
     
     	lfd = Socket(AF_INET,SOCK_STREAM,0);
     	
     	Bind(lfd,(struct sockaddr *)&server_addr,sizeof(server_addr));
     	
     	Listen(lfd,128);
     
     	client_addr_len = sizeof(client_addr);
     	while(1){
     		cfd = Accept(lfd,(struct sockaddr *)&client_addr,&client_addr_len);
     		pid = fork();//创建子进程
     		if(pid < 0){
     			sys_err("fork error");
     		}else if(pid == 0){
     			close(lfd);
     			break;
     		}else{
     			struct sigaction act;
     			act.sa_handler = catch_child;
     			sigemptyset(&act.sa_mask);
     			act.sa_flags = 0;
     			ret = sigaction(SIGCHLD,&act,NULL);
     			if(ret!=0){
     				sys_err("sigaction error!");
     			}
     			close(cfd);
     			continue;
     		}
     	}
     	if(pid == 0){ //子进程工作
     		for(;;){
     			ret = read(cfd,buf,sizeof(buf));
     			if(ret == 0){
     				close(cfd);
     				exit(1);
     			}
     			for(i=0;i<sizeof(buf);i++){
     				buf[i] = toupper(buf[i]);
     			}	
     			write(cfd,buf,ret);
     			write(STDOUT_FILENO,buf,ret);
     		}
     	}
     
     	return 0;
     }
     
     ```

     

